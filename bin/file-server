#!/usr/bin/env node

'use strict';

const portfinder = require('portfinder');
const minimist = require('minimist');
const colors = require('colors/safe');
const packageInfo = require('./../package.json');
const fileServer = require('../lib/file-server');
const argv =  minimist(process.argv.slice(2)); 

console.log([
  'alias:',
  '  file-server',
  '  fs',
  '',
  `version: ${packageInfo.version} `,
  '',
].join('\n'));

if (argv.h || argv.help) {
  console.log([
    'usage: files-upload-server [path] [options]',
    '',
    'options:',
    '  -p --port    Port to use [8008]',
    '  -V --version Version Info',
    '  -s --silent  Suppress log messages from output',
    '',
    '  -S --ssl     Enable https.',
    '  -C --cert    Path to ssl cert file (default: cert.pem).',
    '  -K --key     Path to ssl key file (default: key.pem).',
    '',
    '  -h --help    Print this list and exit.'
  ].join('\n'));
  process.exit();
}

if (!!argv.V || !!argv.version) {
  console.log([
    'usage: files-upload-server [path] [options]',
  ].join('\n'));
  process.exit();
}

let logger = {
  info: console.log,
  log: !argv.s && !argv.silent ? console.log : () => { }
};
let port = argv.p || argv.port || parseInt(process.env.PORT, 10);

if (!port) {
  portfinder.basePort = 8008;
  portfinder.getPort(function (err, port) {
    if (err) { throw err; }
    listen(port);
  });
} else {
  listen(port);
}

function listen(port) {
  let options = {
    port: port,
    host: ''
  };

  if (argv._[0]) {
    options.path = argv._[0]
  }

  if (!!argv.S || !!argv.ssl) {
    options.https = {
      cert: argv.C || argv.cert || 'cert.pem',
      key: argv.K || argv.key || 'key.pem'
    };
  }


  fileServer.createServer(options, logger);

}

if (process.platform === 'win32') {
  require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  }).on('SIGINT', function () {
    process.emit('SIGINT');
  });
}

process.on('SIGINT', function () {
  logger.info(colors.red('http-server stopped.'));
  process.exit();
});

process.on('SIGTERM', function () {
  logger.info(colors.red('http-server stopped.'));
  process.exit();
});